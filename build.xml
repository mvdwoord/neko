<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenPCF Component" default="help" basedir=".">


    <!-- Set global properties. -->
    <property name="build"  location="build"/>
    <property name="dist"  location="dist"/>


    <!-- Do some basic initialization. -->
    <target name="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
    </target>


    <!-- Build a release. -->
    <target name="build" depends="init">
        <!-- Read release properties from release.xml. -->
        <xmlproperty file="release.xml" collapseAttributes="true"/>

        <!-- Using javascript functions to create lower and uppercase names. -->
        <script language="javascript"> <![CDATA[
        namestring = project.getProperty("release.name");
        lowercase = namestring.toLowerCase();
        uppercase = namestring.toUpperCase();
        project.setProperty("release.name.lowercase",lowercase);
        project.setProperty("release.name.uppercase",uppercase);
        ]]> </script>

        <!-- Extract current svn info and write to svninfo.xml. -->
        <exec dir="." executable="svn" output="svninfo.xml">
            <arg line="info --xml"/>
        </exec>

        <!-- Read revision properties from svninfo.xml. -->
        <xmlproperty file="svninfo.xml" collapseAttributes="true"/>

        <!-- Using javascript to format commit time and date from svninfo.xml. -->
        <script language="javascript"> <![CDATA[
        datestring = String(project.getProperty("info.entry.commit.date"));
        datestrcut = datestring.split('.').slice(0);
        datefmtin = java.text.SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");
        datefmtout = java.text.SimpleDateFormat("MMMM dd yyyy HH:mm 'UTC'");
        commitdate = datefmtout.format(datefmtin.parse(datestrcut));
        project.setProperty("release.date.commit",commitdate);
        ]]> </script>

        <!-- Using javascript to determine release tag from svn repository url. -->
        <script language="javascript"> <![CDATA[
        namestring = project.getProperty("release.name.lowercase");
        repostring = project.getProperty("info.entry.url");
        if      (repostring.match(/\/tags/))     { project.setProperty("release.tag","release"); } 
        else if (repostring.match(/\/branches/)) { project.setProperty("release.tag","branch");  }
        else if (repostring.match(/\/trunk/))    { project.setProperty("release.tag","trunk");   }
        else                                     { project.setProperty("release.tag","unknown"); }
        ]]> </script>

        <!-- Set the current time and date. -->
        <tstamp>
            <format property="release.date.built" pattern="MMMM dd yyyy HH:mm z" timezone="UTC"/>
        </tstamp>

        <!-- Create a few release properties. -->
        <property name="release.number.full"      value="${release.version.major}.${release.version.minor}.${release.version.patch}.${info.entry.commit.revision}"/>
    	<property name="release.number.short"     value="${release.version.major}.${release.version.minor}.${release.version.patch}"/>
    	<property name="release.string.version"   value="${release.name} version ${release.number.full} ${release.tag}"/> 
        <property name="release.string.copyright" value="Copyright Â© ${release.copyright.daterange} ${release.copyright.toname}"/>
        <property name="release.string.reldate"   value="Released ${release.date.commit}"/> 
        <property name="release.string.built"     value="Built ${release.date.built}"/>
        <property name="release.string.license"   value="Licensed under ${release.license.name}"/>

        <!-- Tell us about it. -->
        <echo>  Version string: ${release.string.version}</echo>
        <echo>Copyright string: ${release.string.copyright}</echo>
        <echo>  Release string: ${release.string.reldate}</echo>
        <echo>  Builder string: ${release.string.built}</echo>
        <echo>  License string: ${release.string.license}</echo>

        <!-- Copy data to build directory. -->
        <copy todir="${build}">
            <fileset dir=".">
            	<exclude name="svninfo.xml"/>
                <exclude name="build/**"/>
                <exclude name="dist/**"/>
                <exclude name=".settings/**"/>
                <exclude name=".*"/>
                <exclude name="*.sln*"/>
                <exclude name="*.suo*"/>
                <exclude name="*.xml"/>
                <exclude name="*.pyproj*"/>
            </fileset>
        </copy>
        
        <!-- Replace version string name and number template stanza. -->
        <replaceregexp byline="true">
            <regexp pattern="RELEASE.STRING.VERSION"/>
            <substitution expression="${release.string.version}"/>
            <fileset dir="build" excludes="*.xml"/>
        </replaceregexp>

        <!-- Replace release copyright stanza. -->
        <replaceregexp byline="true">
            <regexp pattern="RELEASE.STRING.COPYRIGHT"/>
            <substitution expression="${release.string.copyright}"/>
            <fileset dir="build" excludes="*.xml"/>
        </replaceregexp>

        <!-- Replace release date stanza. -->
        <replaceregexp byline="true">
            <regexp pattern="RELEASE.STRING.RELDATE"/>
            <substitution expression="${release.string.reldate}"/>
            <fileset dir="build" excludes="*.xml"/>
        </replaceregexp>

        <!-- Replace release built date stanza. -->
        <replaceregexp byline="true">
            <regexp pattern="RELEASE.STRING.BUILT"/>
            <substitution expression="${release.string.built}"/>
            <fileset dir="build" excludes="*.xml"/>
        </replaceregexp>

        <!-- Replace release license stanza. -->
        <replaceregexp byline="true">
            <regexp pattern="RELEASE.STRING.LICENSE"/>
            <substitution expression="${release.string.license}"/>
            <fileset dir="build" excludes="*.xml"/>
        </replaceregexp>
    </target>


    <!-- Generate a distributable. -->
    <target name="dist-zip" depends="build">
        <!-- Create zip file. -->
        <zip destfile="${dist}/${release.name.lowercase}-${release.number.short}-${release.tag}.zip">
            <fileset dir="build"/>
        </zip>

        <!-- Create verification hashes. -->
        <checksum file="${dist}/${release.name.lowercase}-${release.number.short}-${release.tag}.zip" algorithm="md5"/>
        <checksum file="${dist}/${release.name.lowercase}-${release.number.short}-${release.tag}.zip" algorithm="sha1"/>
        <checksum file="${dist}/${release.name.lowercase}-${release.number.short}-${release.tag}.zip" algorithm="sha-256"/>
        <checksum file="${dist}/${release.name.lowercase}-${release.number.short}-${release.tag}.zip" algorithm="sha-512"/>
    </target>


    <!-- Clean up. -->
    <target name="clean">
        <delete file="svninfo.xml"/>
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>

    <!-- Help. -->
    <target name="help">
        <echo>Valid targets: init build dist-zip clean</echo>
    </target>
</project>
